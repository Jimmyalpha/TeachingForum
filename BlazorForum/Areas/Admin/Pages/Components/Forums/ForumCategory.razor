@page "/manage/forums/{forumId:int}/categories/{id:int}"
@inject HeadBuilderService head
@inject IManageForumCategories manageCategories
@inject IManageForumTopics manageTopics
@inject UserManager<ApplicationUser> userManager
@inject IBlazorModal blazorModal
@inject NavigationManager navManager

<section class="mb-3">
    <a href="@String.Format("/admin/manage/forums/{0}/categories/{1}/edit", forumId, id)"
       class="btn btn-blazorforum">编辑细节</a>
    <button class="btn btn-danger float-right" type="button" @onclick="@(() => DeleteCategoryClicked())">删除子版块</button>
</section>
<section>
    <header>
        <h3>@_category.Title</h3>
    </header>
    <section class="content-container">
        @_category.Description
    </section>

    <section class="mt-3">
        <header class="secondary-header">
            <i class="oi oi-comment-square mr-2"></i>话题
        </header>
        <ul class="forum-ul">
            @if (_topics == null)
            {
                <li>Loading...</li>
            }
            else if (_topics.Count == 0)
            {
                <li>没有话题</li>
            }
            @foreach (var topic in _topics)
            {
                <li>
                    @* // TODO - display post flag count, mark as approved..etc. *@
                    @topic.Title
                    <div class="list-item-details">
                        Posted @DateTimeFormatting.RelativeDateAgo(topic.PostedDate)
                        by @topic.UserName | Flags @topic.Flags
                        <div>
                            <a href="@String.Format("/admin/manage/forums/{0}/categories/{1}/topics/{2}", forumId, id, topic.ForumTopicId)"
                               class="btn btn-sm btn-blazorforum mt-1 mr-2">
                                编辑
                            </a>
                            <button class="btn btn-sm btn-blazorforum mt-1" @onclick="@(() => DeleteTopicClicked(topic.ForumTopicId))">
                                删除
                            </button>
                        </div>
                    </div>
                </li>
            }
        </ul>
    </section>
</section>

@code {
    [Parameter] public int forumId { get; set; }
    [Parameter] public int id { get; set; }
    private Models.ForumCategory _category = new Models.ForumCategory();
    private List<Models.ForumTopic> _topics = new List<Models.ForumTopic>();
    private int _itemIdToDelete = -1;

    public void Dispose()
    {
        blazorModal.OnConfirmDeleteForumCategory -= CategoryDeleteConfirmed;
        blazorModal.OnConfirmDeleteForumTopicItem -= TopicDeleteConfirmed;
    }

    protected override async Task OnInitializedAsync()
    {
        _category = await manageCategories.GetForumCategoryAsync(id);
        head.Title = "Forum Category | Administration";
        await LoadTopicsAsync();

        blazorModal.OnConfirmDeleteForumCategory += CategoryDeleteConfirmed;
        blazorModal.OnConfirmDeleteForumTopicItem += TopicDeleteConfirmed;
    }

    private async Task LoadTopicsAsync()
    {
        _topics = await manageTopics.GetApprovedForumTopicsAsync(id);
        _topics = _topics.OrderByDescending(p => p.PostedDate).ToList();
        await AddUserToTopic();
    }

    private async Task AddUserToTopic()
    {
        foreach (var topic in _topics)
        {
            var user = await userManager.FindByIdAsync(topic.UserId);
            topic.UserName = user.UserName;
        }
    }

    private void DeleteTopicClicked(int topicId)
    {
        _itemIdToDelete = topicId;
        string modalMessage = "确定要删除话题及相应的帖子吗?";
        if (_itemIdToDelete != -1)
            blazorModal.Show<ConfirmModal>("删除",
                BlazorModalParameter.Get("ModalText", modalMessage),
                BlazorModalParameter.Get("ItemToDelete", "topic-item"));
    }

    private void DeleteCategoryClicked()
    {
        var modalMessage = "确定要删除子版块吗?这同时将删除相关的话题、帖子";
        blazorModal.Show<ConfirmModal>("删除子版块",
            BlazorModalParameter.Get("ModalText", modalMessage),
            BlazorModalParameter.Get("ItemToDelete", "category"));
    }

    public async void CategoryDeleteConfirmed()
    {
        blazorModal.Close();

        var deleted = await manageCategories.DeleteCategoryAsync(id);
        if (deleted)
            navManager.NavigateTo("/admin/manage/forums/" + forumId);
    }

    public async void TopicDeleteConfirmed()
    {
        blazorModal.Close();

        var deleted = await manageTopics.DeleteForumTopicAsync(_itemIdToDelete);
        if (deleted)
            await LoadTopicsAsync();
        _itemIdToDelete = -1;
        StateHasChanged();
    }
}
